// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//Model
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  password              String?
  emailVerified         DateTime?
  image                 String?
  role                  UserRole               @default(USER)
  isOAuth               Boolean                @default(false)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation twoFactorConfirmation?
  // Optional for WebAuthn support
  sentEmails            Email[]                @relation("SentEmails")
  receivedEmails        Recipient[]
  replies               Reply[]
  trash                 Trash[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model twoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model twoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([token, email])
}

model verificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  // @@unique([token, email])
}

model passwordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String
  expires DateTime

  @@unique([token, email])
}

model Email {
  id         Int         @id @default(autoincrement())
  sender     User        @relation("SentEmails", fields: [senderId], references: [id])
  senderId   String
  subject    String?
  body       String?
  sentAt     DateTime    @default(now())
  recipients Recipient[]
  replies    Reply[]
  trash      Trash[]
}

model Recipient {
  id          Int    @id @default(autoincrement())
  email       Email  @relation(fields: [emailId], references: [id])
  emailId     Int
  recipient   User   @relation(fields: [recipientId], references: [id])
  recipientId String
}

model Reply {
  id        Int      @id @default(autoincrement())
  email     Email    @relation(fields: [emailId], references: [id])
  emailId   Int
  sender    User     @relation(fields: [senderId], references: [id])
  senderId  String
  body      String
  repliedAt DateTime @default(now())
  replyTo   Reply?   @relation("ReplyToReplies", fields: [replyToId], references: [id])
  replyToId Int?
  replies   Reply[]  @relation("ReplyToReplies")
}

model Trash {
  id             Int      @id @default(autoincrement())
  email          Email    @relation(fields: [emailId], references: [id])
  emailId        Int
  user           User     @relation(fields: [userId], references: [id])
  userId         String
  deletedAt      DateTime @default(now())
  previousFolder String
}
